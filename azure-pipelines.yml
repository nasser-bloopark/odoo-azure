# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

# https://www.shedloadofcode.com/blog/automated-deployment-of-a-vue-flask-app-using-azure-pipelines

trigger:
- main
- odoo

variables:
  subscriptionID: 'Testing' # https://stackoverflow.com/questions/60437249/how-to-parametrize-azuresubscription-in-azure-devops-template-task
  image: 'ubuntu-latest'
  pythonVersion: '3.8'
  environmentName: 'OdooEnv'
  appName: 'odoo-azure'
  projectRoot: $(System.DefaultWorkingDirectory)
  dockerImageName: 'odoo-azure-img'
  dockerHub: 'https://index.docker.io/v1/'
  image_tags: |-
    $(Build.SourceBranchName)
    $(Build.BuildId)
    $(Build.SourceVersion)

stages:
- stage: Build
  displayName: Build stage
  jobs:
    - job: BuildJob
      pool:
        vmImage: $(image)
#      strategy:
#        matrix:
#          Python38:
#            python.version: $(pythonVersion)
      steps:
      - task: Docker@2
        displayName: Build Docker Image
        inputs:
          repository: $(dockerImageName)
          command: build
          Dockerfile: Dockerfile
      - task: Docker@2
        displayName: Push Docker Image
        inputs:
          containerRegistry: "DockerHub"
          repository: $(dockerImageName)
          command: push
          tags: $(dockerImageName)
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '$(pythonVersion)'
        displayName: 'Use Python $(pythonVersion)'
      - script: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        displayName: 'Install dependencies'
      - script: |
          pip install pytest pytest-azurepipelines
          pytest
        displayName: 'pytest'
#      - task: ArchiveFiles@2
#        inputs:
#          rootFolderOrFile: '$(projectRoot)'
#          includeRootFolder: false
#          archiveType: zip
#          archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#          replaceExistingArchive: true
#        displayName: 'Archive files'
#      - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
#        displayName: 'Upload package'
#        artifact: drop

- stage: Deploy
  displayName: 'Build Application'
  dependsOn: Build
  condition: succeeded()
  jobs:
    - deployment: DeploymentJob
      pool:
        vmImage: $(image)
      environment: $(environmentName)
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebAppContainer@1
              displayName: 'Azure Web App on Container Deploy'
              inputs:
                azureSubscription: $(subscriptionID)
                appName: $(appName)
                imageName: $(dockerImageName)
#            - task: PublishBuildArtifacts@1
#              inputs:
#                pathtoPublish: '$(Build.ArtifactStagingDirectory)'
